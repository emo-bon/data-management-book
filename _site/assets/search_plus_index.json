{"/data-management-book/devops/": {
    "title": "Devops",
    "keywords": "Jekyll",
    "url": "/data-management-book/devops/",
    "body": "Context EMO BON = EMBRC Marine Omics Biodiversity Observation Network Environmental DNA (eDNA) metabarcoding is applied to samples taken at sea (either water or sediment) Species occurrences may be represented via RDF or DwC-A (species + location + time) Relating samples with observatories (Part I) Relevant repositories: https://github.com/emo-bon/governance-data https://github.com/emo-bon/repo-constructor-action Samples are taken by observatories. Each observatory has an observatory id and an ENA project accession number (predefined). All observatories are grouped under a single ENA umbrella project number (predefined) PRJEB51688. A single observatory may be operated by multiple organizations, for example the observatory identified by BPNS is operated by Ghent University (UGENT), Flanders Marine Institute (VLIZ), Royal Belgian Institute of Natural Sciences (RBINS) and Katholieke Universiteit Leuven (KULeuven). A single observatory may take multiple samples. Therefore, each observatory maintains a list of samples taken (Google Sheets), along with their unique identifier (sample id) and other relevant attributes. These spreadsheets are known as “logsheets” (cfr. https://github.com/emo-bon/governance-data/blob/main/logsheets.csv). In order to manage the observatories’ data on GitHub, a repository is automatically constructed for each observatory via a GitHub action, repo-constructor-action, acting on the governance-data repository. More specifically, this action reads the logsheets.csv file and generates a repository with these properties: observatory id (repository name becomes observatory-{observatory_id}-crate) Google Sheets URLs RO-Crate profile URI Downstream GitHub action workflow (see Part II) The properties are eventually stored in the newly created repo under ./config/workflow_properties.yml Relating samples with observatories (Part II) Relevant repositories: https://github.com/emo-bon/observatory-bpns-crate https://github.com/emo-bon/observatory-profile Once the observatory-{observatory_id}-crate repository is generated, a series of GitHub actions will be acting on it: logsheet-downloader-action: Downloads the spreadsheets from Google Sheets and stores them under the ./logsheets folder, with each spreadsheet tab splitted out into a single CSV file. The download is scheduled to occur every 6 months. data-quality-control-action: Reads the data_quality_control_threshold_date from ./config/workflow_properties.yml and runs a data quality control pipeline, repairing data where possible. Initially, the logsheets are filtered up to the threshold date and stored under ./logsheets-filtered. Next, data rules and corresponding repairs are applied to the filtered data and the results are stored under ./logsheets-transformed. Violations, errors and warnings are reported under ./data-quality-control: dqc.csv: Full list of data rule violations. logfile: Full list of errors and warnings. report.csv: Reduced list of data rule violations, with only the violations that can’t be repaired automatically. Eventually, a GitHub issue is created, pointing the end user to the logfile and report. rocrate-sembench-setup: Makes preparations for the next action, semantify, by initializing a rocrate from a default profile if necessary and assembling the required files and variables into the ~sembench_data_cache folder (i.e. files coming from the observatory-profile) and ~sembench_kwargs.json file, respectively. These steps are not handled by semantify, because we wanted to separate rocrate-specific logic from pysembench logic on a conceptual level. The utility files produced by this action and used by semantify are untracked via the .gitignore. TODO semantify: generate ttl (with pysubyt task) validate ttl (with pyshacl task) generate ldes feed create list of generated items for reuse by rocrate-validate TODO: rocrate-validate validate repair TODO: rocrate-to-pages Relating samples with sequencing runs Relevant repositories: https://github.com/emo-bon/sequencing-data https://github.com/emo-bon/sequencing-profile Samples coming from several observatories are aggregated into a single batch by EMBRC and are sent to Genoscope for DNA sequencing. A batch thus consists of a list of sample identifiers. For each sample in the batch, an ENA sample accession number needs to be generated and immutably stored Genoscope will upload the sequencing data under a run accession number below the given sample accession number TODO … Relating samples with species occurrences TODO metagoflow uses existing computational workflow profile References European Marine Biological Resource Centre (EMBRC) Resource Description Framework (RDF) Darwin Core Archive (DwC-A) European Nucleotide Archive (ENA) Research Object Crate (RO-Crate)"
  },"/data-management-book/entities/": {
    "title": "Entities",
    "keywords": "Jekyll",
    "url": "/data-management-book/entities/",
    "body": "RO-Profiles Concept RO-profiles encapsulate Research Object (RO) profiles that describe conformity to a fixed set of expectations for data structures. They ensure consistency in the way research data is formatted and provide practical assets such as templates, SHACL files, documentation, and other reference materials. (More information available at: Ro Crate profiles) URI Format https://data.embon.embrc.eu/{name}-profile/{version} {name}: One of observatory, sequencing, analysis-results {version}: latest or a specific version vM.m.p. (e.g., v1.0.0) Creation &amp; Management Managed at: https://github.com/emo-bon/{name}-profile References Used as metadata descriptors for crates that comply with specific profile expectations. Crates Concept Crates are structured data packages that encapsulate various types of research data. They serve as containers for datasets, metadata, and other related information, ensuring consistency, traceability, and compliance with RO-profiles. Types Governance Crate Concept: Contains information relating to the governance of EMO BON GitHub activities and actions. Creation &amp; Management: https://github.com/emo-bon/governance-crate/ URI Format: https://data.emobon.embrc.eu/governance-crate/ References: ? Observatory Crate Concept: Holds information about an EMOBON Observatory, its associated sampling events, and the data generated from those events. Creation &amp; Management: https://github.com/emo-bon/observatory-{obsid}-crate/ URI Format: https://data.emobon.embrc.eu/observatory-{obsid}-crate/ {obsid}: Name of the EMOBON observatory References: ? Analysis-Results Crate Concept: Holds information and data resulting from MetaGOFlow data analysis processes. Creation &amp; Management: https://github.com/emo-bon/analysis-results-{cluster}-crate/{genoscope-code}/ URI Format: https://data.emobon.embrc.eu/analysis-results-{cluster}-crate/{genoscope-code}/ References: Sequencing Crate Concept: Holds information and data resulting from sequencing runs. Creation &amp; Management: https://github.com/emo-bon/sequencing-crate/??/{material_sample_id} URI Format: https://data.emobon.embrc.eu/sequencing-crate/??/{material_sample_id} References: Data Entities Dataset ? Concept: A curated collection of data, potentially with a persistent identifier and versioning. Creation &amp; Management: Created when structured data is published for reuse. URI Format: References: Observatory Concept: An EMO BON organisational unit linked to the collection of a specific sample type (e.g. water column, soft sediment) from a fixed, pre-determined location. Creation &amp; Management: https://github.com/emo-bon/observatory-{obsid}-crate/ URI Format: http://data.emobon.embrc.eu/observatory-{obsid}-crate/{env_package}/observatory/{obsid} {obsid}: … {env_package}: … References: ? Sampling Event Concept: A sampling action performed at a particular observatory at a specific time, resulting in the collection of one or more samples. Creation &amp; Management: https://github.com/emo-bon/observatory-{obsid}-crate/tree/main/{env_package}/sampling URI Format: http://data.emobon.embrc.eu/observatory-{obsid}-crate/{env_package}/sampling/{source_mat_id} References: ? Sample Concept: A material sample collected during a sampling event. Creation &amp; Management: https://github.com/emo-bon/observatory-{obsid}-crate/tree/main/{env_package}/sampling URI Format: http://data.emobon.embrc.eu/observatory-{obsid}-crate/{env_package}/measured/{source_mat_id} References: ? Measurements/Observations Concept: A measurement or observations made from a sample. Creation &amp; Management: https://github.com/emo-bon/observatory-{obsid}-crate/tree/main/{env_package}/measured URI Format: http://data.emobon.embrc.eu/observatory-{obsid}-crate/{env_package}/measured/{source_mat_id}#{observedProperty} References: ? Sequencing Run Concept: Creation &amp; Management: URI Format: https://data.emobon.embrc.eu/sequencing-run/{run-id}/ References: Found in sequencing crates and analysis workflows. Batch Concept: … Creation &amp; Management: `` URI Format: https://data.emobon.embrc.eu/batch/{batch-id}/ References: ? Sequence Concept: … Creation &amp; Management: `` URI Format: https://data.emobon.embrc.eu/sequence/{sequence-id}/ References: Analysis Result Concept: … Creation &amp; Management: `` URI Format: https://data.emobon.embrc.eu/analysis-result/{result-id}/ References: ?"
  },"/data-management-book/flow/": {
    "title": "Flow",
    "keywords": "Jekyll",
    "url": "/data-management-book/flow/",
    "body": "to do system set-up: create governance crate &amp; data space repository (the one creating the site = emo-bon.github.io) manual entries in governance-crate listing GH sheets by id and observatories create repositories for various profiles: observ, sequence &amp; analysis-results create repositories for sequence, analysis-results how do we set up observatory-crates –&gt; github action driven by govenance crate linking to gsheets manual follow up, new crates should get listed in the dat space repository how do we produce observatory crates –&gt; github action: - fetch csv content from gsheets - apply QC - report on needed actions - generate triples using templates from observatory-profile - produce ro-crate - publish to gh-pages how do we register sequences into sequence crate ?? todo &amp; follow up - code, automation to check how do sequences end up at ENA ?? todo &amp; describe agreements with GENOSCOPE how do we get analysis results crate in future: get locations and availability of samples &amp; their sequences through the system (currently: manual knowledge available to Cymon) todo: describe metagoflow process + post processing triplisation of results executed by dockerized semantic uplifting provided in (todo: ref to *docker repo) results added to GH repository analysis-results-XX-crate + large files S3 via dvc how to get metadata into catalogue (e.g. FAIR EASE IDDAS) todo: execution of dockerized process (ref to docker repo) harvest links to datasets from data.emobon.embrc.eu/ apply sema harvest tricks to assemble linked triples (minimally ro-crate-metadata.json) export harvest result into dump file for import in asset catalogue how to build-up triple store todo: execution of dockerized stack (ref to docker repo) that: harvest links to datasets from data.emobon.embrc.eu/ apply extensive harvest tricks to assemble ALL linked triples (including data turtle inside ro-crates) expose the triple store / SPARQL-endpoint at public URL (e.g. sparql.- or api.emobon.embrc.eu) how to consume data &amp; api todo: UDAL named queries todo: VREs consuming those via sema query + udal"
  },"/data-management-book/glossary/": {
    "title": "Glossary",
    "keywords": "Jekyll",
    "url": "/data-management-book/glossary/",
    "body": "A comprehensive list of terms and definitions used throughout the EMO-BON project. Physical concepts Partner: An EMO BON member, which is typically but not exclusively an institute. Station: An EMO BON Station. Stations collect EMO BON samples. Stations may have multiple observatories, and each observatory can involve contributions from one or more partners. Observatory: An EMO BON organisational unit linked to the collection of a specific sample type (e.g. water column, soft sediment) from a fixed, pre-determined location. While technically an observatory is tied to a sample type, this distinction is often ignored in casual use since the observatory’s base name (obs_id) is the same for all sample types. Notes: Definition may need an update once the ARMS units are fully incorporated in EMO BON. Sampling event: A sampling action performed at a particular observatory at a specific time, resulting in the collection of one or more samples. Material Sample: Refers to a material sample collected during a sampling event. Each unique material sample has a unique material sample ID. Also used to refer to the sample material that was sequenced, where the physical sample no longer exists but it is virtually present via its sample ID. Digital concepts Logsheet: The spreadsheets in which the observatories write their sample and event data. The source spreadsheets are on the EMO BON googledrive, from where they are harvested as CSV into EMOBON’s GH space. The “transformed” logsheets are those that have been subjected to a date-range selection and a QC. EMO BON data: Here we mean: the content of the logsheets, which are filled by the observatories to describe their collected samples; the sequences in ENA; the outputs from bioinformatics processing. Notes: And once ARMS units are incorporated, this will also include ARMS images. EMO BON metadata: Here we mean the data that is used specifically to describe EMO BON data, performing the function of allowing discovery, understanding, organising, cataloguing, etc. Metadata are recorded in the rocrate-metadata.json files; they are added to ENA accessions; they are in files in the EMO BON repos governance-data, sequencing-data, observatory-profile, among others. EMO BON record: A digital representation of a sampling event, capturing the relevant data and metadata associated with it. There is no fixed idea of what is included in an EMO BON record, as that depends on the system that these records are being held in; for example, EMO BON records in EurOBIS and in Blue Cloud will not necessarily be the same. Catalogue asset: The smallest unit of “EMOBON dataset” that goes into a dataset’s metadata catalogue, i.e. a specific “EMO BON record” in a specific catalogue. Can be a single data file or a set of files. EMO BON Repository: A GitHub repository* that contains EMO BON data and metadata. *A GitHub repository represents a storage location for files and their version history, managed using Git version control which allows users to track changes, collaborate with others, and maintain a complete record of the project’s development over time. EMO BON RO-Crate: EMO BON ro-crates* contain data associated with: logsheets from observatories, MetaGOflow runs, sequencing metadata. Usually, our ro-crates are single repositories, but for some, one repository contains multiple ro-crates. A ro-crate is manifest via a ro-crate-metadata.json file. *An Ro-crate is a collection of data files, metadata, and contextual information that organizes research data in a structured format, enabling easy sharing, reuse, and understanding in both machine-readable and human-readable forms. EM BON ro-crate-metadata.json: A ro-crate-metadata.json file* that describes the contents of an EMO BON RO-Crate. *A rocrate-metadata.json file is a JSON-LD file that provides a detailed description of the contents and structure of an RO-Crate. It maps relationships between files and their metadata, ensuring traceability, context, and purpose for data within research workflows. Sequence: A DNA string. Specifically, we mean (raw) sequences as produced from the material samples by Genoscope and held on their cloud drive and then archived on ENA. processed sequences / OTUs / ASVs: These are sequences that have been processed by a bioinformatics code to a stage where they can be/have been compared to taxonomic reference libraries. Stub: N/A"
  },"/data-management-book/repository-naming/": {
    "title": "Repository naming",
    "keywords": "Jekyll",
    "url": "/data-management-book/repository-naming/",
    "body": "Conventions Use lowercase Repository names should be in lowercase by default. Exception: Use the original case for names with widely recognized case-sensitive formatting, such as: MetaGOflow, ROSKOGO (e.g. in observatory-ROSKOGO-crate). Use Kebab case Separate words of repository names with dashes (-), instead of underscores (_), spaces, or CamelCase. Exception: Dots (.) are allowed in domain-like constructs (e.g., GitHub suggests emo-bon.github.io as an entry point for github.io publications). Avoid use of plurals Avoid use of trailing s in folder and repository names, as they don’t provide additional meaning — it’s already clear that repositories can contain multiple items. Types of repositories Repo suffix Type of Repo -crate An actual RO-Crate holding data -profile An actual RO-Profile (a crate in its own right) that formally describes the layout/structure of the crates that declare conformance to it -example Indicative of playground nature of the repo. Can be combined with other suffixes (but should be the final one) -docs A larger body of self-contained documentation. Should probably have a reflecting page linking to it from the main website repo"
  }}
